{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/poster.js","filenameRelative":"/client/poster.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/poster.js.map","sourceFileName":"/client/poster.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"poster"},"ignored":false,"code":"Accounts.ui.config({\n    passwordSignupFields: \"USERNAME_ONLY\"\n});\n\n// This code only runs on the client\nTemplate.posts.helpers({\n    posts: function () {\n        function posts() {\n            return Posts.find({}, { sort: { createdAt: -1 } });\n        }\n\n        return posts;\n    }()\n});\n\n// TODO: make sure the server only allows user to remove own posts\nTemplate.post.events({\n    \"click .delete\": function () {\n        function clickDelete() {\n            Posts.remove(this._id);\n        }\n\n        return clickDelete;\n    }()\n});\n\nTemplate.post.helpers({\n\n    // Returns true if this post is mine\n    isMyPost: function () {\n        function isMyPost() {\n            var me = Meteor.userId();\n\n            // If I am not logged in, none of the posts are recognized as \"mine\"\n            if (!me) return false;\n\n            // TODO: Renamed \"owner\" into \"author\" and never did a db migration.\n            // \"Owner\" is here only for historical reasons.\n            var result = me == this.author || me == this.owner;\n            return result;\n        }\n\n        return isMyPost;\n    }(),\n\n    author: function () {\n        function author() {\n\n            // TODO db migration from owner to author\n            var authorId = this.author || this.owner;\n            var author = Meteor.users.findOne({ _id: authorId });\n            console.log(\"Found author: \" + \"for \" + authorId, author);\n            return author;\n        }\n\n        return author;\n    }()\n});","ast":null,"map":{"version":3,"sources":["/client/poster.js"],"names":[],"mappings":"AAAA,SAAS,EAAT,CAAY,MAAZ,CAAmB;AACf,0BAAsB,eAAtB;CADJ;;;AAKA,SAAS,KAAT,CAAe,OAAf,CAAuB;AACnB;AAAO,yBAAY;AACf,mBAAO,MAAM,IAAN,CAAW,EAAX,EAAe,EAAC,MAAM,EAAC,WAAW,CAAC,CAAD,EAAlB,EAAhB,CAAP,CADe;SAAZ;;;OAAP;CADJ;;;AAQA,SAAS,IAAT,CAAc,MAAd,CAAqB;AACjB;AAAiB,+BAAY;AACzB,kBAAM,MAAN,CAAa,KAAK,GAAL,CAAb,CADyB;SAAZ;;;OAAjB;CADJ;;AAMA,SAAS,IAAT,CAAc,OAAd,CAAsB;;;AAGlB;AAAU,4BAAW;AACjB,gBAAI,KAAK,OAAO,MAAP,EAAL;;;AADa,gBAIb,CAAC,EAAD,EACA,OAAO,KAAP,CADJ;;;;AAJiB,gBASb,SAAW,MAAM,KAAK,MAAL,IAAe,MAAM,KAAK,KAAL,CATzB;AAUjB,mBAAO,MAAP,CAViB;SAAX;;;OAAV;;AAaA;AAAQ,0BAAW;;;AAGf,gBAAI,WAAW,KAAK,MAAL,IAAe,KAAK,KAAL,CAHf;AAIf,gBAAI,SAAS,OAAO,KAAP,CAAa,OAAb,CAAqB,EAAC,KAAK,QAAL,EAAtB,CAAT,CAJW;AAKf,oBAAQ,GAAR,CAAY,mBAAmB,MAAnB,GAA4B,QAA5B,EAAsC,MAAlD,EALe;AAMf,mBAAO,MAAP,CANe;SAAX;;;OAAR;CAhBJ","file":"/client/poster.js.map","sourcesContent":["Accounts.ui.config({\n    passwordSignupFields: \"USERNAME_ONLY\"\n});\n\n// This code only runs on the client\nTemplate.posts.helpers({\n    posts: function () {\n        return Posts.find({}, {sort: {createdAt: -1}});\n    }\n});\n\n\n// TODO: make sure the server only allows user to remove own posts\nTemplate.post.events({\n    \"click .delete\": function () {\n        Posts.remove(this._id);\n    }\n});\n\nTemplate.post.helpers({\n\n    // Returns true if this post is mine\n    isMyPost: function() {\n        var me = Meteor.userId();\n\n        // If I am not logged in, none of the posts are recognized as \"mine\"\n        if (!me)\n            return false;\n\n        // TODO: Renamed \"owner\" into \"author\" and never did a db migration.\n        // \"Owner\" is here only for historical reasons.\n        var result = ( me == this.author || me == this.owner);\n        return result;\n    },\n\n    author: function() {\n\n        // TODO db migration from owner to author\n        var authorId = this.author || this.owner;\n        var author = Meteor.users.findOne({_id: authorId});\n        console.log(\"Found author: \" + \"for \" + authorId, author);\n        return author;\n    }\n});\n\n\n"]},"hash":"b48439bbfb6fd17f07fe8a57fb626571aa7f83d3"}
