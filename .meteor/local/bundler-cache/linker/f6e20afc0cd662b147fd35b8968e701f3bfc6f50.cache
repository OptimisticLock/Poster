[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar Template = Package.templating.Template;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar _ = Package.underscore._;\nvar Gravatar = Package['jparker:gravatar'].Gravatar;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar getDescendantProp, getService, getCustomUrl, getGravatarUrl, getEmailOrHash, sizeClass, shapeClass, customClasses, initialsText, createCSS, sizeName, Avatar;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/utilities_avatar/blaze/template.avatar.js                                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n                                                                                                                     // 1\nTemplate.__checkName(\"avatar\");                                                                                      // 2\nTemplate[\"avatar\"] = new Template(\"Template.avatar\", (function() {                                                   // 3\n  var view = this;                                                                                                   // 4\n  return HTML.DIV({                                                                                                  // 5\n    \"class\": function() {                                                                                            // 6\n      return [ Spacebars.mustache(view.lookup(\"cssClassPrefix\")), \" \", Spacebars.mustache(view.lookup(\"size\")), \" \", Spacebars.mustache(view.lookup(\"shape\")), \" \", Spacebars.mustache(view.lookup(\"class\")) ];\n    }                                                                                                                // 8\n  }, \"\\n    \", HTML.IMG({                                                                                            // 9\n    \"class\": function() {                                                                                            // 10\n      return [ Spacebars.mustache(view.lookup(\"cssClassPrefix\")), \"-image\" ];                                        // 11\n    },                                                                                                               // 12\n    src: function() {                                                                                                // 13\n      return Spacebars.mustache(view.lookup(\"imageUrl\"));                                                            // 14\n    },                                                                                                               // 15\n    alt: \"avatar\",                                                                                                   // 16\n    onerror: \"this.style.display='none';\"                                                                            // 17\n  }), \"\\n    \", HTML.SPAN({                                                                                          // 18\n    \"class\": function() {                                                                                            // 19\n      return [ Spacebars.mustache(view.lookup(\"cssClassPrefix\")), \"-initials\" ];                                     // 20\n    },                                                                                                               // 21\n    style: function() {                                                                                              // 22\n      return Spacebars.mustache(view.lookup(\"initialsCss\"));                                                         // 23\n    }                                                                                                                // 24\n  }, Blaze.View(\"lookup:initialsText\", function() {                                                                  // 25\n    return Spacebars.mustache(view.lookup(\"initialsText\"));                                                          // 26\n  })), \"\\n  \");                                                                                                      // 27\n}));                                                                                                                 // 28\n                                                                                                                     // 29\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/utilities_avatar/blaze/avatar.js                                                                         //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nTemplate.avatar.helpers({                                                                                            // 1\n                                                                                                                     // 2\n  cssClassPrefix: function () {                                                                                      // 3\n    return Avatar.getCssClassPrefix();                                                                               // 4\n  },                                                                                                                 // 5\n                                                                                                                     // 6\n  size: function () {                                                                                                // 7\n    return sizeClass(this);                                                                                          // 8\n  },                                                                                                                 // 9\n                                                                                                                     // 10\n  shape: function () {                                                                                               // 11\n    return shapeClass(this)                                                                                          // 12\n  },                                                                                                                 // 13\n                                                                                                                     // 14\n  class: function () {                                                                                               // 15\n    return customClasses(this);                                                                                      // 16\n  },                                                                                                                 // 17\n                                                                                                                     // 18\n  imageUrl: function () {                                                                                            // 19\n    var user = this.user ? this.user : Meteor.users.findOne(this.userId);                                            // 20\n    var url = Avatar.getUrl(user);                                                                                   // 21\n    if (url && url.trim() !== '' && Template.instance().firstNode) {                                                 // 22\n      var img = Template.instance().find('img');                                                                     // 23\n      if (img.src !== url.trim()) {                                                                                  // 24\n        img.style.removeProperty('display');                                                                         // 25\n      }                                                                                                              // 26\n    }                                                                                                                // 27\n    return url;                                                                                                      // 28\n  },                                                                                                                 // 29\n                                                                                                                     // 30\n  initialsCss: function () {                                                                                         // 31\n    var user = this.user ? this.user : Meteor.users.findOne(this.userId);                                            // 32\n    var css = '';                                                                                                    // 33\n                                                                                                                     // 34\n    var backgroundColorProperty = 'background-color: ';                                                              // 35\n    if (this.bgColor) backgroundColorProperty += this.bgColor;                                                       // 36\n    else backgroundColorProperty += Avatar.getBackgroundColor(user);                                                 // 37\n    css += backgroundColorProperty + ';';                                                                            // 38\n                                                                                                                     // 39\n    var textColorProperty = 'color: ';                                                                               // 40\n    if (this.txtColor) textColorProperty += this.txtColor;                                                           // 41\n    else textColorProperty += Avatar.getTextColor(user);                                                             // 42\n    css += textColorProperty + ';';                                                                                  // 43\n                                                                                                                     // 44\n    return css;                                                                                                      // 45\n  },                                                                                                                 // 46\n                                                                                                                     // 47\n  initialsText: function () {                                                                                        // 48\n    var user = this.user ? this.user : Meteor.users.findOne(this.userId);                                            // 49\n    return initialsText(user, this);                                                                                 // 50\n  }                                                                                                                  // 51\n                                                                                                                     // 52\n});                                                                                                                  // 53\n                                                                                                                     // 54\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/utilities_avatar/utils.js                                                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// see http://stackoverflow.com/questions/8051975/access-object-child-properties-using-a-dot-notation-string         // 1\ngetDescendantProp = function (obj, desc) {                                                                           // 2\n  var arr = desc.split(\".\");                                                                                         // 3\n  while(arr.length && (obj = obj[arr.shift()]));                                                                     // 4\n  return obj;                                                                                                        // 5\n};                                                                                                                   // 6\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/utilities_avatar/helpers.js                                                                              //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// Get the account service to use for the user's avatar                                                              // 1\n// Priority: Twitter > Facebook > Google > GitHub > Instagram > Linkedin                                             // 2\ngetService = function (user) {                                                                                       // 3\n  var services = user && user.services || {};                                                                        // 4\n  if (getCustomUrl(user)) { return 'custom'; }                                                                       // 5\n  var service = _.find([['twitter', 'profile_image_url_https'], ['facebook', 'id'], ['google', 'picture'], ['github', 'username'], ['instagram', 'profile_picture'], ['linkedin', 'pictureUrl']], function(s) { return !!services[s[0]] && s[1].length && !!services[s[0]][s[1]]; });\n  if(!service)                                                                                                       // 7\n    return 'none';                                                                                                   // 8\n  else                                                                                                               // 9\n    return service[0];                                                                                               // 10\n};                                                                                                                   // 11\n                                                                                                                     // 12\ngetCustomUrl = function (user) {                                                                                     // 13\n  var computeUrl = function(prop) {                                                                                  // 14\n    if (typeof prop === 'function') {                                                                                // 15\n      prop = prop.call(user);                                                                                        // 16\n    }                                                                                                                // 17\n    if (prop && typeof prop === 'string') {                                                                          // 18\n      return prop;                                                                                                   // 19\n    }                                                                                                                // 20\n  }                                                                                                                  // 21\n                                                                                                                     // 22\n  var customProp = user && Avatar.options.customImageProperty;                                                       // 23\n  if (typeof customProp === 'function') {                                                                            // 24\n    return computeUrl(customProp);                                                                                   // 25\n  } else if (customProp) {                                                                                           // 26\n    return computeUrl(getDescendantProp(user, customProp));                                                          // 27\n  }                                                                                                                  // 28\n}                                                                                                                    // 29\n                                                                                                                     // 30\ngetGravatarUrl = function (user, defaultUrl) {                                                                       // 31\n  var gravatarDefault;                                                                                               // 32\n  var validGravatars = ['404', 'mm', 'identicon', 'monsterid', 'wavatar', 'retro', 'blank'];                         // 33\n                                                                                                                     // 34\n  // Initials are shown when Gravatar returns 404.                                                                   // 35\n  if (Avatar.options.fallbackType !== 'initials') {                                                                  // 36\n    var valid = _.contains(validGravatars, Avatar.options.gravatarDefault);                                          // 37\n    gravatarDefault = valid ? Avatar.options.gravatarDefault : defaultUrl;                                           // 38\n  }                                                                                                                  // 39\n  else {                                                                                                             // 40\n    gravatarDefault = '404';                                                                                         // 41\n  }                                                                                                                  // 42\n                                                                                                                     // 43\n  var options = {                                                                                                    // 44\n    // NOTE: Gravatar's default option requires a publicly accessible URL,                                           // 45\n    // so it won't work when your app is running on localhost and you're                                             // 46\n    // using an image with either the standard default image URL or a custom                                         // 47\n    // defaultImageUrl that is a relative path (e.g. 'images/defaultAvatar.png').                                    // 48\n    default: gravatarDefault,                                                                                        // 49\n    size: 200, // use 200x200 like twitter and facebook above (might be useful later)                                // 50\n    secure: true                                                                                                     // 51\n  };                                                                                                                 // 52\n                                                                                                                     // 53\n  var emailOrHash = getEmailOrHash(user);                                                                            // 54\n  return Gravatar.imageUrl(emailOrHash, options);                                                                    // 55\n};                                                                                                                   // 56\n                                                                                                                     // 57\n// Get the user's email address or (if the emailHashProperty is defined) hash                                        // 58\ngetEmailOrHash = function (user) {                                                                                   // 59\n  var emailOrHash;                                                                                                   // 60\n  if (user && Avatar.options.emailHashProperty && !!getDescendantProp(user, Avatar.options.emailHashProperty)) {     // 61\n    emailOrHash = getDescendantProp(user, Avatar.options.emailHashProperty);                                         // 62\n  }                                                                                                                  // 63\n  else if (user && user.emails) {                                                                                    // 64\n    var emails = _.pluck(user.emails, 'address');                                                                    // 65\n    emailOrHash = emails[0] || '00000000000000000000000000000000';                                                   // 66\n  }                                                                                                                  // 67\n  else {                                                                                                             // 68\n    // If all else fails, return 32 zeros (trash hash, hehe) so that Gravatar                                        // 69\n    // has something to build a URL with at least.                                                                   // 70\n    emailOrHash = '00000000000000000000000000000000';                                                                // 71\n  }                                                                                                                  // 72\n  return emailOrHash;                                                                                                // 73\n};                                                                                                                   // 74\n                                                                                                                     // 75\n// Returns the size class to use for an avatar                                                                       // 76\nsizeClass = function(context) {                                                                                      // 77\n  // Defaults are 'large', 'small', 'extra-small', but user can add new ones                                         // 78\n  return Avatar.options.imageSizes[context.size] ? Avatar.getCssClassPrefix() + '-' + context.size : '';             // 79\n}                                                                                                                    // 80\n                                                                                                                     // 81\n// Returns the shape class for an avatar                                                                             // 82\nshapeClass = function (context) {                                                                                    // 83\n  var valid = ['rounded', 'circle'];                                                                                 // 84\n  return _.contains(valid, context.shape) ? Avatar.getCssClassPrefix() + '-' + context.shape : '';                   // 85\n}                                                                                                                    // 86\n                                                                                                                     // 87\n// Returns the custom class(es) for an avatar                                                                        // 88\ncustomClasses = function (context) {                                                                                 // 89\n  return context.class ? context.class : '';                                                                         // 90\n}                                                                                                                    // 91\n                                                                                                                     // 92\n// Returns the initials text for an avatar                                                                           // 93\ninitialsText = function(user, context) {                                                                             // 94\n  return context.initials || Avatar.getInitials(user);                                                               // 95\n}                                                                                                                    // 96\n                                                                                                                     // 97\n// Creates the dynamically generated CSS file                                                                        // 98\n//                                                                                                                   // 99\n// CSS is dynamically generated so that we can have both a custom class prefix and also allow for custom sizes       // 100\ncreateCSS = function () {                                                                                            // 101\n                                                                                                                     // 102\n  // We only need to do this on the server                                                                           // 103\n                                                                                                                     // 104\n  if (!Meteor.isServer)                                                                                              // 105\n    return;                                                                                                          // 106\n                                                                                                                     // 107\n  // The base CSS styles                                                                                             // 108\n                                                                                                                     // 109\n  var p = '.' + Avatar.getCssClassPrefix();                                                                          // 110\n  var a = p + ' ';                                                                                                   // 111\n                                                                                                                     // 112\n  var css =                                                                                                          // 113\n    p + ' { \\n\\\n      height: 50px; \\n\\\n      width: 50px; \\n\\\n      position: relative; \\n\\\n    } \\n' +                                                                                                          // 118\n    a + p + '-image, \\n' +                                                                                           // 119\n    a + p + '-initials { \\n\\\n      height: 100%; \\n\\\n      width: 100%; \\n\\\n      position: absolute; \\n\\\n      top: 0px; \\n\\\n      left: 0px; \\n\\\n    } \\n' +                                                                                                          // 126\n    a + p + '-image { \\n\\\n      z-index: 10; \\n\\\n      background-color: #fff; \\n\\\n    } \\n' +                                                                                                          // 130\n    a + p + '-initials { \\n\\\n      display: block; \\n\\\n      background-size: 100% 100%; \\n\\\n      background-color: ' + Avatar.options.backgroundColor + '; \\n\\\n      color: ' + Avatar.options.textColor +'; \\n\\\n      font-size: 25px; \\n\\\n      line-height: 50px; \\n\\\n      font-family: \"Helvetica Neue\", Helvetica, \"Hiragino Sans GB\", Arial, sans-serif; \\n\\\n      text-align: center; \\n\\\n      z-index: 1; \\n\\\n    } \\n' +                                                                                                          // 141\n    p + '-rounded ' + p + '-image, \\n' +                                                                             // 142\n    p + '-rounded ' + p + '-initials { \\n\\\n      border-radius: 5px; \\n\\\n    } \\n'+                                                                                                           // 145\n    p + '-circle ' + p + '-image, \\n' +                                                                              // 146\n    p + '-circle ' + p + '-initials { \\n\\\n      border-radius: 50%; \\n\\\n    } \\n' +                                                                                                          // 149\n    p + '-hide-image ' + p + '-image { \\n\\\n      display: none; \\n\\\n    } \\n' +                                                                                                          // 152\n    p + '-hide-initials ' + p + '-initials { \\n\\\n      display: none; \\n\\\n    } \\n\\\n  ';                                                                                                                 // 156\n                                                                                                                     // 157\n  // CSS for each of the defined sizes                                                                               // 158\n                                                                                                                     // 159\n  for (sizeName in Avatar.options.imageSizes) {                                                                      // 160\n                                                                                                                     // 161\n    var size = Avatar.options.imageSizes[sizeName];                                                                  // 162\n                                                                                                                     // 163\n    css = css + p + '-' + sizeName + ' {' +                                                                          // 164\n      'width: ' + size + 'px; ' +                                                                                    // 165\n      'min-width: ' + size + 'px; ' +                                                                                // 166\n      'height: ' + size + 'px;' +                                                                                    // 167\n    '}\\n' +                                                                                                          // 168\n    p + '-' + sizeName + ' ' + p + '-initials {' +                                                                   // 169\n      'font-size: ' + size / 2 + 'px; ' +                                                                            // 170\n      'line-height: ' + size + 'px;' +                                                                               // 171\n    '}\\n';                                                                                                           // 172\n  }                                                                                                                  // 173\n                                                                                                                     // 174\n  // In order to allow for custom sizes and a custom prefix we need to be able to create a style sheet               // 175\n  // on the fly. To do this cleanly we use the meteor-hacks:inject package to inject the styles directly             // 176\n  // into the HTML code before it's sent to the client.                                                              // 177\n                                                                                                                     // 178\n  Inject.rawHead('avatar-styles', '<style>' + css + '</style>');                                                     // 179\n}                                                                                                                    // 180\n                                                                                                                     // 181\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/utilities_avatar/export.js                                                                               //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// Avatar object to be exported                                                                                      // 1\n                                                                                                                     // 2\nAvatar = {                                                                                                           // 3\n                                                                                                                     // 4\n  // Default functionality. You can override these options by calling                                                // 5\n  // Avater.setOptions (do not set Avatar.options directly)                                                          // 6\n                                                                                                                     // 7\n  options: {                                                                                                         // 8\n                                                                                                                     // 9\n    // Determines the type of fallback to use when no image can be found via                                         // 10\n    // linked services (Gravatar included):                                                                          // 11\n    //   \"default image\" (the default option, which will show either the image                                       // 12\n    //   specified by defaultImageUrl, the package's default image, or a Gravatar                                    // 13\n    //   default image)                                                                                              // 14\n    //     OR                                                                                                        // 15\n    //   \"initials\" (show the user's initials).                                                                      // 16\n    fallbackType: '',                                                                                                // 17\n                                                                                                                     // 18\n    // This will replace the included default avatar image's URL                                                     // 19\n    // ('packages/utilities_avatar/default.png'). It can be a relative path                                          // 20\n    // (relative to website's base URL, e.g. 'images/defaultAvatar.png').                                            // 21\n    defaultImageUrl: '',                                                                                             // 22\n                                                                                                                     // 23\n    // This property name will be used to fetch an avatar url from the user's profile                                // 24\n    // (e.g. 'avatar'). If this property is set and a property of that name exists                                   // 25\n    // on the user's profile (e.g. user.profile.avatar) that property will be used                                   // 26\n    // as the avatar url.                                                                                            // 27\n    customImageProperty: '',                                                                                         // 28\n                                                                                                                     // 29\n    // Gravatar default option to use (overrides default image URL)                                                  // 30\n    // Options are available at:                                                                                     // 31\n    // https://secure.gravatar.com/site/implement/images/#default-image                                              // 32\n    gravatarDefault: '',                                                                                             // 33\n                                                                                                                     // 34\n    // This property on the user object will be used for retrieving gravatars                                        // 35\n    // (useful when user emails are not published).                                                                  // 36\n    emailHashProperty: '',                                                                                           // 37\n                                                                                                                     // 38\n    // This property is used to prefix the CSS classes of the DOM elements.                                          // 39\n    // If no value is set, then the default CSS class assigned to all DOM elements are prefixed with 'avatar' as default.\n    // If a value is set to, 'foo' for example, the resulting CSS classes are prefixed with 'foo'.                   // 41\n    cssClassPrefix: '',                                                                                              // 42\n                                                                                                                     // 43\n    // This property defines the various image sizes available                                                       // 44\n    imageSizes: {                                                                                                    // 45\n      'large': 80,                                                                                                   // 46\n      'small': 30,                                                                                                   // 47\n      'extra-small': 20                                                                                              // 48\n    },                                                                                                               // 49\n                                                                                                                     // 50\n    // Default background color when displaying the initials.                                                        // 51\n    // Can also be set to a function to map an user object to a background color.                                    // 52\n    backgroundColor: \"#aaa\",                                                                                         // 53\n                                                                                                                     // 54\n    // Default text color when displaying the initials.                                                              // 55\n    // Can also be set to a function to map an user object to a text color.                                          // 56\n    textColor: \"#fff\",                                                                                               // 57\n                                                                                                                     // 58\n    // Generate the required CSS and includ it in the head of your application.                                      // 59\n    // Setting this to false will exclude the generated CSS and leave the                                            // 60\n    // avatar unstyled by the package.                                                                               // 61\n    generateCSS: true                                                                                                // 62\n  },                                                                                                                 // 63\n                                                                                                                     // 64\n  // Sets the Avatar options. You must use this setter function rather than assigning directly to                    // 65\n  // Avatar.options, otherwise the stylesheet won't be generated.                                                    // 66\n                                                                                                                     // 67\n  setOptions: function(options) {                                                                                    // 68\n    Avatar.options = _.extend(Avatar.options, options);                                                              // 69\n    if (Avatar.options.generateCSS)                                                                                  // 70\n      createCSS();                                                                                                   // 71\n  },                                                                                                                 // 72\n                                                                                                                     // 73\n  // Returns the cssClassPrefix property from options                                                                // 74\n  getCssClassPrefix: function () {                                                                                   // 75\n    return (Avatar.options.cssClassPrefix)? Avatar.options.cssClassPrefix: 'avatar';                                 // 76\n  },                                                                                                                 // 77\n                                                                                                                     // 78\n  // Returns a background color for initials                                                                         // 79\n  getBackgroundColor: function (user) {                                                                              // 80\n    if (_.isString(Avatar.options.backgroundColor))                                                                  // 81\n      return Avatar.options.backgroundColor;                                                                         // 82\n    else if (_.isFunction(Avatar.options.backgroundColor))                                                           // 83\n      return Avatar.options.backgroundColor(user);                                                                   // 84\n  },                                                                                                                 // 85\n                                                                                                                     // 86\n  // Returns a text color for initials                                                                               // 87\n  getTextColor: function (user) {                                                                                    // 88\n    if (_.isString(Avatar.options.textColor))                                                                        // 89\n      return Avatar.options.textColor;                                                                               // 90\n    else if (_.isFunction(Avatar.options.textColor))                                                                 // 91\n      return Avatar.options.textColor(user);                                                                         // 92\n  },                                                                                                                 // 93\n                                                                                                                     // 94\n  // Get the initials of the user                                                                                    // 95\n  getInitials: function (user) {                                                                                     // 96\n                                                                                                                     // 97\n    var initials = '';                                                                                               // 98\n    var name = '';                                                                                                   // 99\n    var parts = [];                                                                                                  // 100\n                                                                                                                     // 101\n    if (user && user.profile && user.profile.firstName) {                                                            // 102\n      initials = user.profile.firstName.charAt(0).toUpperCase();                                                     // 103\n                                                                                                                     // 104\n      if (user.profile.lastName) {                                                                                   // 105\n        initials += user.profile.lastName.charAt(0).toUpperCase();                                                   // 106\n      }                                                                                                              // 107\n      else if (user.profile.familyName) {                                                                            // 108\n        initials += user.profile.familyName.charAt(0).toUpperCase();                                                 // 109\n      }                                                                                                              // 110\n      else if (user.profile.secondName) {                                                                            // 111\n        initials += user.profile.secondName.charAt(0).toUpperCase();                                                 // 112\n      }                                                                                                              // 113\n    }                                                                                                                // 114\n    else {                                                                                                           // 115\n      if (user && user.profile && user.profile.name) {                                                               // 116\n        name = user.profile.name;                                                                                    // 117\n      }                                                                                                              // 118\n      else if (user && user.username) {                                                                              // 119\n        name = user.username;                                                                                        // 120\n      }                                                                                                              // 121\n                                                                                                                     // 122\n      parts = name.split(' ');                                                                                       // 123\n      // Limit getInitials to first and last initial to avoid problems with                                          // 124\n      // very long multi-part names (e.g. \"Jose Manuel Garcia Galvez\")                                               // 125\n      initials = _.first(parts).charAt(0).toUpperCase();                                                             // 126\n      if (parts.length > 1) {                                                                                        // 127\n        initials += _.last(parts).charAt(0).toUpperCase();                                                           // 128\n      }                                                                                                              // 129\n    }                                                                                                                // 130\n                                                                                                                     // 131\n    return initials;                                                                                                 // 132\n  },                                                                                                                 // 133\n                                                                                                                     // 134\n  // Get the url of the user's avatar                                                                                // 135\n  getUrl: function (user) {                                                                                          // 136\n                                                                                                                     // 137\n    var url = '';                                                                                                    // 138\n    var defaultUrl, svc;                                                                                             // 139\n                                                                                                                     // 140\n    if (user) {                                                                                                      // 141\n      svc = getService(user);                                                                                        // 142\n      if (svc === 'twitter') {                                                                                       // 143\n        // use larger image (200x200 is smallest custom option)                                                      // 144\n        url = user.services.twitter.profile_image_url_https.replace('_normal.', '_200x200.');                        // 145\n      }                                                                                                              // 146\n      else if (svc === 'facebook') {                                                                                 // 147\n        // use larger image (~200x200)                                                                               // 148\n        url = 'https://graph.facebook.com/' + user.services.facebook.id + '/picture/?type=large';                    // 149\n      }                                                                                                              // 150\n      else if (svc === 'google') {                                                                                   // 151\n        url = user.services.google.picture;                                                                          // 152\n      }                                                                                                              // 153\n      else if (svc === 'github') {                                                                                   // 154\n        url = 'https://avatars.githubusercontent.com/' + user.services.github.username + '?s=200';                   // 155\n      }                                                                                                              // 156\n      else if (svc === 'instagram') {                                                                                // 157\n        url = user.services.instagram.profile_picture;                                                               // 158\n      }                                                                                                              // 159\n      else if (svc === 'linkedin') {                                                                                 // 160\n        url = user.services.linkedin.pictureUrl;                                                                     // 161\n      }                                                                                                              // 162\n      else if (svc === \"custom\") {                                                                                   // 163\n        url = getCustomUrl(user);                                                                                    // 164\n      }                                                                                                              // 165\n      else if (svc === 'none') {                                                                                     // 166\n        defaultUrl = Avatar.options.defaultImageUrl || '/packages/utilities_avatar/default.png';                     // 167\n        // If it's a relative path (no '//' anywhere), complete the URL                                              // 168\n        if (defaultUrl.indexOf('//') === -1) {                                                                       // 169\n          // Strip starting slash if it exists                                                                       // 170\n          if (defaultUrl.charAt(0) === '/') defaultUrl = defaultUrl.slice(1);                                        // 171\n          // Then add the relative path to the server's base URL                                                     // 172\n          defaultUrl = Meteor.absoluteUrl() + defaultUrl;                                                            // 173\n        }                                                                                                            // 174\n        url = getGravatarUrl(user, defaultUrl);                                                                      // 175\n      }                                                                                                              // 176\n    }                                                                                                                // 177\n                                                                                                                     // 178\n    return url;                                                                                                      // 179\n  },                                                                                                                 // 180\n                                                                                                                     // 181\n  // Create a Gravatar-compatible hash for a given email address                                                     // 182\n  hash: function (email) {                                                                                           // 183\n    return Gravatar.hash(email);                                                                                     // 184\n  }                                                                                                                  // 185\n}                                                                                                                    // 186\n                                                                                                                     // 187\n// Call setOptions to generate the default CSS. This will be replaced if the user calls setOptions in their own code\n                                                                                                                     // 189\nAvatar.setOptions({});                                                                                               // 190\n                                                                                                                     // 191\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['utilities:avatar'] = {}, {\n  Avatar: Avatar\n});\n\n})();\n","servePath":"/packages/utilities_avatar.js","sourceMap":{"version":3,"sources":["/packages/utilities_avatar/blaze/template.avatar.js","/packages/utilities_avatar/blaze/avatar.js","/packages/utilities_avatar/utils.js","/packages/utilities_avatar/helpers.js","/packages/utilities_avatar/export.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0H;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0H;;;;;;;;;;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA,yH;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACpfile":"/packages/utilities_avatar.js","sourcesContent":["\nTemplate.__checkName(\"avatar\");\nTemplate[\"avatar\"] = new Template(\"Template.avatar\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": function() {\n      return [ Spacebars.mustache(view.lookup(\"cssClassPrefix\")), \" \", Spacebars.mustache(view.lookup(\"size\")), \" \", Spacebars.mustache(view.lookup(\"shape\")), \" \", Spacebars.mustache(view.lookup(\"class\")) ];\n    }\n  }, \"\\n    \", HTML.IMG({\n    \"class\": function() {\n      return [ Spacebars.mustache(view.lookup(\"cssClassPrefix\")), \"-image\" ];\n    },\n    src: function() {\n      return Spacebars.mustache(view.lookup(\"imageUrl\"));\n    },\n    alt: \"avatar\",\n    onerror: \"this.style.display='none';\"\n  }), \"\\n    \", HTML.SPAN({\n    \"class\": function() {\n      return [ Spacebars.mustache(view.lookup(\"cssClassPrefix\")), \"-initials\" ];\n    },\n    style: function() {\n      return Spacebars.mustache(view.lookup(\"initialsCss\"));\n    }\n  }, Blaze.View(\"lookup:initialsText\", function() {\n    return Spacebars.mustache(view.lookup(\"initialsText\"));\n  })), \"\\n  \");\n}));\n","Template.avatar.helpers({\n\n  cssClassPrefix: function () {\n    return Avatar.getCssClassPrefix();\n  },\n\n  size: function () {\n    return sizeClass(this);\n  },\n\n  shape: function () {\n    return shapeClass(this)\n  },\n\n  class: function () {\n    return customClasses(this);\n  },\n\n  imageUrl: function () {\n    var user = this.user ? this.user : Meteor.users.findOne(this.userId);\n    var url = Avatar.getUrl(user);\n    if (url && url.trim() !== '' && Template.instance().firstNode) {\n      var img = Template.instance().find('img');\n      if (img.src !== url.trim()) {\n        img.style.removeProperty('display');\n      }\n    }\n    return url;\n  },\n\n  initialsCss: function () {\n    var user = this.user ? this.user : Meteor.users.findOne(this.userId);\n    var css = '';\n\n    var backgroundColorProperty = 'background-color: ';\n    if (this.bgColor) backgroundColorProperty += this.bgColor;\n    else backgroundColorProperty += Avatar.getBackgroundColor(user);\n    css += backgroundColorProperty + ';';\n\n    var textColorProperty = 'color: ';\n    if (this.txtColor) textColorProperty += this.txtColor;\n    else textColorProperty += Avatar.getTextColor(user);\n    css += textColorProperty + ';';\n\n    return css;\n  },\n\n  initialsText: function () {\n    var user = this.user ? this.user : Meteor.users.findOne(this.userId);\n    return initialsText(user, this);\n  }\n\n});\n","// see http://stackoverflow.com/questions/8051975/access-object-child-properties-using-a-dot-notation-string\ngetDescendantProp = function (obj, desc) {\n  var arr = desc.split(\".\");\n  while(arr.length && (obj = obj[arr.shift()]));\n  return obj;\n};","// Get the account service to use for the user's avatar\n// Priority: Twitter > Facebook > Google > GitHub > Instagram > Linkedin\ngetService = function (user) {\n  var services = user && user.services || {};\n  if (getCustomUrl(user)) { return 'custom'; }\n  var service = _.find([['twitter', 'profile_image_url_https'], ['facebook', 'id'], ['google', 'picture'], ['github', 'username'], ['instagram', 'profile_picture'], ['linkedin', 'pictureUrl']], function(s) { return !!services[s[0]] && s[1].length && !!services[s[0]][s[1]]; });\n  if(!service)\n    return 'none';\n  else\n    return service[0];\n};\n\ngetCustomUrl = function (user) {\n  var computeUrl = function(prop) {\n    if (typeof prop === 'function') {\n      prop = prop.call(user);\n    }\n    if (prop && typeof prop === 'string') {\n      return prop;\n    }\n  }\n\n  var customProp = user && Avatar.options.customImageProperty;\n  if (typeof customProp === 'function') {\n    return computeUrl(customProp);\n  } else if (customProp) {\n    return computeUrl(getDescendantProp(user, customProp));\n  }\n}\n\ngetGravatarUrl = function (user, defaultUrl) {\n  var gravatarDefault;\n  var validGravatars = ['404', 'mm', 'identicon', 'monsterid', 'wavatar', 'retro', 'blank'];\n\n  // Initials are shown when Gravatar returns 404.\n  if (Avatar.options.fallbackType !== 'initials') {\n    var valid = _.contains(validGravatars, Avatar.options.gravatarDefault);\n    gravatarDefault = valid ? Avatar.options.gravatarDefault : defaultUrl;\n  }\n  else {\n    gravatarDefault = '404';\n  }\n\n  var options = {\n    // NOTE: Gravatar's default option requires a publicly accessible URL,\n    // so it won't work when your app is running on localhost and you're\n    // using an image with either the standard default image URL or a custom\n    // defaultImageUrl that is a relative path (e.g. 'images/defaultAvatar.png').\n    default: gravatarDefault,\n    size: 200, // use 200x200 like twitter and facebook above (might be useful later)\n    secure: true\n  };\n\n  var emailOrHash = getEmailOrHash(user);\n  return Gravatar.imageUrl(emailOrHash, options);\n};\n\n// Get the user's email address or (if the emailHashProperty is defined) hash\ngetEmailOrHash = function (user) {\n  var emailOrHash;\n  if (user && Avatar.options.emailHashProperty && !!getDescendantProp(user, Avatar.options.emailHashProperty)) {\n    emailOrHash = getDescendantProp(user, Avatar.options.emailHashProperty);\n  }\n  else if (user && user.emails) {\n    var emails = _.pluck(user.emails, 'address');\n    emailOrHash = emails[0] || '00000000000000000000000000000000';\n  }\n  else {\n    // If all else fails, return 32 zeros (trash hash, hehe) so that Gravatar\n    // has something to build a URL with at least.\n    emailOrHash = '00000000000000000000000000000000';\n  }\n  return emailOrHash;\n};\n\n// Returns the size class to use for an avatar\nsizeClass = function(context) {\n  // Defaults are 'large', 'small', 'extra-small', but user can add new ones\n  return Avatar.options.imageSizes[context.size] ? Avatar.getCssClassPrefix() + '-' + context.size : '';\n}\n\n// Returns the shape class for an avatar\nshapeClass = function (context) {\n  var valid = ['rounded', 'circle'];\n  return _.contains(valid, context.shape) ? Avatar.getCssClassPrefix() + '-' + context.shape : '';\n}\n\n// Returns the custom class(es) for an avatar\ncustomClasses = function (context) {\n  return context.class ? context.class : '';\n}\n\n// Returns the initials text for an avatar\ninitialsText = function(user, context) {\n  return context.initials || Avatar.getInitials(user);\n}\n\n// Creates the dynamically generated CSS file\n//\n// CSS is dynamically generated so that we can have both a custom class prefix and also allow for custom sizes\ncreateCSS = function () {\n\n  // We only need to do this on the server\n\n  if (!Meteor.isServer)\n    return;\n\n  // The base CSS styles\n\n  var p = '.' + Avatar.getCssClassPrefix();\n  var a = p + ' ';\n\n  var css =\n    p + ' { \\n\\\n      height: 50px; \\n\\\n      width: 50px; \\n\\\n      position: relative; \\n\\\n    } \\n' +\n    a + p + '-image, \\n' +\n    a + p + '-initials { \\n\\\n      height: 100%; \\n\\\n      width: 100%; \\n\\\n      position: absolute; \\n\\\n      top: 0px; \\n\\\n      left: 0px; \\n\\\n    } \\n' +\n    a + p + '-image { \\n\\\n      z-index: 10; \\n\\\n      background-color: #fff; \\n\\\n    } \\n' +\n    a + p + '-initials { \\n\\\n      display: block; \\n\\\n      background-size: 100% 100%; \\n\\\n      background-color: ' + Avatar.options.backgroundColor + '; \\n\\\n      color: ' + Avatar.options.textColor +'; \\n\\\n      font-size: 25px; \\n\\\n      line-height: 50px; \\n\\\n      font-family: \"Helvetica Neue\", Helvetica, \"Hiragino Sans GB\", Arial, sans-serif; \\n\\\n      text-align: center; \\n\\\n      z-index: 1; \\n\\\n    } \\n' +\n    p + '-rounded ' + p + '-image, \\n' +\n    p + '-rounded ' + p + '-initials { \\n\\\n      border-radius: 5px; \\n\\\n    } \\n'+\n    p + '-circle ' + p + '-image, \\n' +\n    p + '-circle ' + p + '-initials { \\n\\\n      border-radius: 50%; \\n\\\n    } \\n' +\n    p + '-hide-image ' + p + '-image { \\n\\\n      display: none; \\n\\\n    } \\n' +\n    p + '-hide-initials ' + p + '-initials { \\n\\\n      display: none; \\n\\\n    } \\n\\\n  ';\n\n  // CSS for each of the defined sizes\n\n  for (sizeName in Avatar.options.imageSizes) {\n\n    var size = Avatar.options.imageSizes[sizeName];\n\n    css = css + p + '-' + sizeName + ' {' +\n      'width: ' + size + 'px; ' +\n      'min-width: ' + size + 'px; ' +\n      'height: ' + size + 'px;' +\n    '}\\n' +\n    p + '-' + sizeName + ' ' + p + '-initials {' +\n      'font-size: ' + size / 2 + 'px; ' +\n      'line-height: ' + size + 'px;' +\n    '}\\n';\n  }\n\n  // In order to allow for custom sizes and a custom prefix we need to be able to create a style sheet\n  // on the fly. To do this cleanly we use the meteor-hacks:inject package to inject the styles directly\n  // into the HTML code before it's sent to the client.\n\n  Inject.rawHead('avatar-styles', '<style>' + css + '</style>');\n}\n","// Avatar object to be exported\n\nAvatar = {\n\n  // Default functionality. You can override these options by calling\n  // Avater.setOptions (do not set Avatar.options directly)\n\n  options: {\n\n    // Determines the type of fallback to use when no image can be found via\n    // linked services (Gravatar included):\n    //   \"default image\" (the default option, which will show either the image\n    //   specified by defaultImageUrl, the package's default image, or a Gravatar\n    //   default image)\n    //     OR\n    //   \"initials\" (show the user's initials).\n    fallbackType: '',\n\n    // This will replace the included default avatar image's URL\n    // ('packages/utilities_avatar/default.png'). It can be a relative path\n    // (relative to website's base URL, e.g. 'images/defaultAvatar.png').\n    defaultImageUrl: '',\n\n    // This property name will be used to fetch an avatar url from the user's profile\n    // (e.g. 'avatar'). If this property is set and a property of that name exists\n    // on the user's profile (e.g. user.profile.avatar) that property will be used\n    // as the avatar url.\n    customImageProperty: '',\n\n    // Gravatar default option to use (overrides default image URL)\n    // Options are available at:\n    // https://secure.gravatar.com/site/implement/images/#default-image\n    gravatarDefault: '',\n\n    // This property on the user object will be used for retrieving gravatars\n    // (useful when user emails are not published).\n    emailHashProperty: '',\n\n    // This property is used to prefix the CSS classes of the DOM elements.\n    // If no value is set, then the default CSS class assigned to all DOM elements are prefixed with 'avatar' as default.\n    // If a value is set to, 'foo' for example, the resulting CSS classes are prefixed with 'foo'.\n    cssClassPrefix: '',\n\n    // This property defines the various image sizes available\n    imageSizes: {\n      'large': 80,\n      'small': 30,\n      'extra-small': 20\n    },\n\n    // Default background color when displaying the initials.\n    // Can also be set to a function to map an user object to a background color.\n    backgroundColor: \"#aaa\",\n\n    // Default text color when displaying the initials.\n    // Can also be set to a function to map an user object to a text color.\n    textColor: \"#fff\",\n\n    // Generate the required CSS and includ it in the head of your application.\n    // Setting this to false will exclude the generated CSS and leave the\n    // avatar unstyled by the package.\n    generateCSS: true\n  },\n\n  // Sets the Avatar options. You must use this setter function rather than assigning directly to\n  // Avatar.options, otherwise the stylesheet won't be generated.\n\n  setOptions: function(options) {\n    Avatar.options = _.extend(Avatar.options, options);\n    if (Avatar.options.generateCSS)\n      createCSS();\n  },\n\n  // Returns the cssClassPrefix property from options\n  getCssClassPrefix: function () {\n    return (Avatar.options.cssClassPrefix)? Avatar.options.cssClassPrefix: 'avatar';\n  },\n\n  // Returns a background color for initials\n  getBackgroundColor: function (user) {\n    if (_.isString(Avatar.options.backgroundColor))\n      return Avatar.options.backgroundColor;\n    else if (_.isFunction(Avatar.options.backgroundColor))\n      return Avatar.options.backgroundColor(user);\n  },\n\n  // Returns a text color for initials\n  getTextColor: function (user) {\n    if (_.isString(Avatar.options.textColor))\n      return Avatar.options.textColor;\n    else if (_.isFunction(Avatar.options.textColor))\n      return Avatar.options.textColor(user);\n  },\n\n  // Get the initials of the user\n  getInitials: function (user) {\n\n    var initials = '';\n    var name = '';\n    var parts = [];\n\n    if (user && user.profile && user.profile.firstName) {\n      initials = user.profile.firstName.charAt(0).toUpperCase();\n\n      if (user.profile.lastName) {\n        initials += user.profile.lastName.charAt(0).toUpperCase();\n      }\n      else if (user.profile.familyName) {\n        initials += user.profile.familyName.charAt(0).toUpperCase();\n      }\n      else if (user.profile.secondName) {\n        initials += user.profile.secondName.charAt(0).toUpperCase();\n      }\n    }\n    else {\n      if (user && user.profile && user.profile.name) {\n        name = user.profile.name;\n      }\n      else if (user && user.username) {\n        name = user.username;\n      }\n\n      parts = name.split(' ');\n      // Limit getInitials to first and last initial to avoid problems with\n      // very long multi-part names (e.g. \"Jose Manuel Garcia Galvez\")\n      initials = _.first(parts).charAt(0).toUpperCase();\n      if (parts.length > 1) {\n        initials += _.last(parts).charAt(0).toUpperCase();\n      }\n    }\n\n    return initials;\n  },\n\n  // Get the url of the user's avatar\n  getUrl: function (user) {\n\n    var url = '';\n    var defaultUrl, svc;\n\n    if (user) {\n      svc = getService(user);\n      if (svc === 'twitter') {\n        // use larger image (200x200 is smallest custom option)\n        url = user.services.twitter.profile_image_url_https.replace('_normal.', '_200x200.');\n      }\n      else if (svc === 'facebook') {\n        // use larger image (~200x200)\n        url = 'https://graph.facebook.com/' + user.services.facebook.id + '/picture/?type=large';\n      }\n      else if (svc === 'google') {\n        url = user.services.google.picture;\n      }\n      else if (svc === 'github') {\n        url = 'https://avatars.githubusercontent.com/' + user.services.github.username + '?s=200';\n      }\n      else if (svc === 'instagram') {\n        url = user.services.instagram.profile_picture;\n      }\n      else if (svc === 'linkedin') {\n        url = user.services.linkedin.pictureUrl;\n      }\n      else if (svc === \"custom\") {\n        url = getCustomUrl(user);\n      }\n      else if (svc === 'none') {\n        defaultUrl = Avatar.options.defaultImageUrl || '/packages/utilities_avatar/default.png';\n        // If it's a relative path (no '//' anywhere), complete the URL\n        if (defaultUrl.indexOf('//') === -1) {\n          // Strip starting slash if it exists\n          if (defaultUrl.charAt(0) === '/') defaultUrl = defaultUrl.slice(1);\n          // Then add the relative path to the server's base URL\n          defaultUrl = Meteor.absoluteUrl() + defaultUrl;\n        }\n        url = getGravatarUrl(user, defaultUrl);\n      }\n    }\n\n    return url;\n  },\n\n  // Create a Gravatar-compatible hash for a given email address\n  hash: function (email) {\n    return Gravatar.hash(email);\n  }\n}\n\n// Call setOptions to generate the default CSS. This will be replaced if the user calls setOptions in their own code\n\nAvatar.setOptions({});\n"]}}]