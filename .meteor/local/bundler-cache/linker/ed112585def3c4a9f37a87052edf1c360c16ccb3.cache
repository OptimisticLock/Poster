[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar OAuth = Package.oauth.OAuth;\nvar Oauth = Package.oauth.Oauth;\nvar _ = Package.underscore._;\nvar Template = Package.templating.Template;\nvar Random = Package.random.Random;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar Github;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                 //\n// packages/github/template.github_configure.js                                                    //\n//                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                   //\n                                                                                                   // 1\nTemplate.__checkName(\"configureLoginServiceDialogForGithub\");                                      // 2\nTemplate[\"configureLoginServiceDialogForGithub\"] = new Template(\"Template.configureLoginServiceDialogForGithub\", (function() {\n  var view = this;                                                                                 // 4\n  return [ HTML.Raw(\"<p>\\n    First, you'll need to get a Github Client ID. Follow these steps:\\n  </p>\\n  \"), HTML.OL(\"\\n    \", HTML.Raw('<li>\\n      Visit <a href=\"https://github.com/settings/applications/new\" target=\"blank\">https://github.com/settings/applications/new</a>\\n    </li>'), \"\\n    \", HTML.LI(\"\\n      Set Homepage URL to: \", HTML.SPAN({\n    \"class\": \"url\"                                                                                 // 6\n  }, Blaze.View(\"lookup:siteUrl\", function() {                                                     // 7\n    return Spacebars.mustache(view.lookup(\"siteUrl\"));                                             // 8\n  })), \"\\n    \"), \"\\n    \", HTML.LI(\"\\n      Set Authorization callback URL to: \", HTML.SPAN({     // 9\n    \"class\": \"url\"                                                                                 // 10\n  }, Blaze.View(\"lookup:siteUrl\", function() {                                                     // 11\n    return Spacebars.mustache(view.lookup(\"siteUrl\"));                                             // 12\n  }), \"_oauth/github\"), \"\\n    \"), \"\\n  \") ];                                                      // 13\n}));                                                                                               // 14\n                                                                                                   // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                 //\n// packages/github/github_configure.js                                                             //\n//                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                   //\nTemplate.configureLoginServiceDialogForGithub.helpers({                                            // 1\n  siteUrl: function () {                                                                           // 2\n    return Meteor.absoluteUrl();                                                                   // 3\n  }                                                                                                // 4\n});                                                                                                // 5\n                                                                                                   // 6\nTemplate.configureLoginServiceDialogForGithub.fields = function () {                               // 7\n  return [                                                                                         // 8\n    {property: 'clientId', label: 'Client ID'},                                                    // 9\n    {property: 'secret', label: 'Client Secret'}                                                   // 10\n  ];                                                                                               // 11\n};                                                                                                 // 12\n                                                                                                   // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                 //\n// packages/github/github_client.js                                                                //\n//                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                   //\nGithub = {};                                                                                       // 1\n                                                                                                   // 2\n// Request Github credentials for the user                                                         // 3\n// @param options {optional}                                                                       // 4\n// @param credentialRequestCompleteCallback {Function} Callback function to call on                // 5\n//   completion. Takes one argument, credentialToken on success, or Error on                       // 6\n//   error.                                                                                        // 7\nGithub.requestCredential = function (options, credentialRequestCompleteCallback) {                 // 8\n  // support both (options, callback) and (callback).                                              // 9\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {                       // 10\n    credentialRequestCompleteCallback = options;                                                   // 11\n    options = {};                                                                                  // 12\n  }                                                                                                // 13\n                                                                                                   // 14\n  var config = ServiceConfiguration.configurations.findOne({service: 'github'});                   // 15\n  if (!config) {                                                                                   // 16\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(                        // 17\n      new ServiceConfiguration.ConfigError());                                                     // 18\n    return;                                                                                        // 19\n  }                                                                                                // 20\n  var credentialToken = Random.secret();                                                           // 21\n                                                                                                   // 22\n  var scope = (options && options.requestPermissions) || ['user:email'];                           // 23\n  var flatScope = _.map(scope, encodeURIComponent).join('+');                                      // 24\n                                                                                                   // 25\n  var loginStyle = OAuth._loginStyle('github', config, options);                                   // 26\n                                                                                                   // 27\n  var loginUrl =                                                                                   // 28\n    'https://github.com/login/oauth/authorize' +                                                   // 29\n    '?client_id=' + config.clientId +                                                              // 30\n    '&scope=' + flatScope +                                                                        // 31\n    '&redirect_uri=' + OAuth._redirectUri('github', config) +                                      // 32\n    '&state=' + OAuth._stateParam(loginStyle, credentialToken, options && options.redirectUrl);    // 33\n                                                                                                   // 34\n  OAuth.launchLogin({                                                                              // 35\n    loginService: \"github\",                                                                        // 36\n    loginStyle: loginStyle,                                                                        // 37\n    loginUrl: loginUrl,                                                                            // 38\n    credentialRequestCompleteCallback: credentialRequestCompleteCallback,                          // 39\n    credentialToken: credentialToken,                                                              // 40\n    popupOptions: {width: 900, height: 450}                                                        // 41\n  });                                                                                              // 42\n};                                                                                                 // 43\n                                                                                                   // 44\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.github = {}, {\n  Github: Github\n});\n\n})();\n","servePath":"/packages/github.js","sourceMap":{"version":3,"sources":["/packages/github/template.github_configure.js","/packages/github/github_configure.js","/packages/github/github_client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wG;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wG;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wG","file":"/packages/github.js","sourcesContent":["\nTemplate.__checkName(\"configureLoginServiceDialogForGithub\");\nTemplate[\"configureLoginServiceDialogForGithub\"] = new Template(\"Template.configureLoginServiceDialogForGithub\", (function() {\n  var view = this;\n  return [ HTML.Raw(\"<p>\\n    First, you'll need to get a Github Client ID. Follow these steps:\\n  </p>\\n  \"), HTML.OL(\"\\n    \", HTML.Raw('<li>\\n      Visit <a href=\"https://github.com/settings/applications/new\" target=\"blank\">https://github.com/settings/applications/new</a>\\n    </li>'), \"\\n    \", HTML.LI(\"\\n      Set Homepage URL to: \", HTML.SPAN({\n    \"class\": \"url\"\n  }, Blaze.View(\"lookup:siteUrl\", function() {\n    return Spacebars.mustache(view.lookup(\"siteUrl\"));\n  })), \"\\n    \"), \"\\n    \", HTML.LI(\"\\n      Set Authorization callback URL to: \", HTML.SPAN({\n    \"class\": \"url\"\n  }, Blaze.View(\"lookup:siteUrl\", function() {\n    return Spacebars.mustache(view.lookup(\"siteUrl\"));\n  }), \"_oauth/github\"), \"\\n    \"), \"\\n  \") ];\n}));\n","Template.configureLoginServiceDialogForGithub.helpers({\n  siteUrl: function () {\n    return Meteor.absoluteUrl();\n  }\n});\n\nTemplate.configureLoginServiceDialogForGithub.fields = function () {\n  return [\n    {property: 'clientId', label: 'Client ID'},\n    {property: 'secret', label: 'Client Secret'}\n  ];\n};\n","Github = {};\n\n// Request Github credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nGithub.requestCredential = function (options, credentialRequestCompleteCallback) {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  }\n\n  var config = ServiceConfiguration.configurations.findOne({service: 'github'});\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(\n      new ServiceConfiguration.ConfigError());\n    return;\n  }\n  var credentialToken = Random.secret();\n\n  var scope = (options && options.requestPermissions) || ['user:email'];\n  var flatScope = _.map(scope, encodeURIComponent).join('+');\n\n  var loginStyle = OAuth._loginStyle('github', config, options);\n\n  var loginUrl =\n    'https://github.com/login/oauth/authorize' +\n    '?client_id=' + config.clientId +\n    '&scope=' + flatScope +\n    '&redirect_uri=' + OAuth._redirectUri('github', config) +\n    '&state=' + OAuth._stateParam(loginStyle, credentialToken, options && options.redirectUrl);\n\n  OAuth.launchLogin({\n    loginService: \"github\",\n    loginStyle: loginStyle,\n    loginUrl: loginUrl,\n    credentialRequestCompleteCallback: credentialRequestCompleteCallback,\n    credentialToken: credentialToken,\n    popupOptions: {width: 900, height: 450}\n  });\n};\n"]}}]