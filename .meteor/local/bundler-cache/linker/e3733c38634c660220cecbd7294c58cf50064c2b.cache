[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar Accounts = Package['accounts-base'].Accounts;\nvar SRP = Package.srp.SRP;\nvar SHA256 = Package.sha.SHA256;\nvar EJSON = Package.ejson.EJSON;\nvar DDP = Package['ddp-client'].DDP;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar _ = Package.underscore._;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"accounts-password\":{\"password_client.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/accounts-password/password_client.js                                                              //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n// Attempt to log in with a password.                                                                         //\n//                                                                                                            //\n// @param selector {String|Object} One of the following:                                                      //\n//   - {username: (username)}                                                                                 //\n//   - {email: (email)}                                                                                       //\n//   - a string which may be a username or email, depending on whether                                        //\n//     it contains \"@\".                                                                                       //\n// @param password {String}                                                                                   //\n// @param callback {Function(error|undefined)}                                                                //\n                                                                                                              //\n/**                                                                                                           //\n * @summary Log the user in with a password.                                                                  //\n * @locus Client                                                                                              //\n * @param {Object | String} user                                                                              //\n *   Either a string interpreted as a username or an email; or an object with a                               //\n *   single key: `email`, `username` or `id`. Username or email match in a case                               //\n *   insensitive manner.                                                                                      //\n * @param {String} password The user's password.                                                              //\n * @param {Function} [callback] Optional callback.                                                            //\n *   Called with no arguments on success, or with a single `Error` argument                                   //\n *   on failure.                                                                                              //\n */                                                                                                           //\nMeteor.loginWithPassword = function (selector, password, callback) {                                          // 23\n  if (typeof selector === 'string') if (selector.indexOf('@') === -1) selector = { username: selector };else selector = { email: selector };\n                                                                                                              //\n  Accounts.callLoginMethod({                                                                                  // 30\n    methodArguments: [{                                                                                       // 31\n      user: selector,                                                                                         // 32\n      password: Accounts._hashPassword(password)                                                              // 33\n    }],                                                                                                       //\n    userCallback: function () {                                                                               // 35\n      function userCallback(error, result) {                                                                  // 35\n        if (error && error.error === 400 && error.reason === 'old password format') {                         // 36\n          // The \"reason\" string should match the error thrown in the                                         //\n          // password login handler in password_server.js.                                                    //\n                                                                                                              //\n          // XXX COMPAT WITH 0.8.1.3                                                                          //\n          // If this user's last login was with a previous version of                                         //\n          // Meteor that used SRP, then the server throws this error to                                       //\n          // indicate that we should try again. The error includes the                                        //\n          // user's SRP identity. We provide a value derived from the                                         //\n          // identity and the password to prove to the server that we know                                    //\n          // the password without requiring a full SRP flow, as well as                                       //\n          // SHA256(password), which the server bcrypts and stores in                                         //\n          // place of the old SRP information for this user.                                                  //\n          srpUpgradePath({                                                                                    // 50\n            upgradeError: error,                                                                              // 51\n            userSelector: selector,                                                                           // 52\n            plaintextPassword: password                                                                       // 53\n          }, callback);                                                                                       //\n        } else if (error) {                                                                                   //\n          callback && callback(error);                                                                        // 57\n        } else {                                                                                              //\n          callback && callback();                                                                             // 59\n        }                                                                                                     //\n      }                                                                                                       //\n                                                                                                              //\n      return userCallback;                                                                                    //\n    }()                                                                                                       //\n  });                                                                                                         //\n};                                                                                                            //\n                                                                                                              //\nAccounts._hashPassword = function (password) {                                                                // 65\n  return {                                                                                                    // 66\n    digest: SHA256(password),                                                                                 // 67\n    algorithm: \"sha-256\"                                                                                      // 68\n  };                                                                                                          //\n};                                                                                                            //\n                                                                                                              //\n// XXX COMPAT WITH 0.8.1.3                                                                                    //\n// The server requested an upgrade from the old SRP password format,                                          //\n// so supply the needed SRP identity to login. Options:                                                       //\n//   - upgradeError: the error object that the server returned to tell                                        //\n//     us to upgrade from SRP to bcrypt.                                                                      //\n//   - userSelector: selector to retrieve the user object                                                     //\n//   - plaintextPassword: the password as a string                                                            //\nvar srpUpgradePath = function srpUpgradePath(options, callback) {                                             // 79\n  var details;                                                                                                // 80\n  try {                                                                                                       // 81\n    details = EJSON.parse(options.upgradeError.details);                                                      // 82\n  } catch (e) {}                                                                                              //\n  if (!(details && details.format === 'srp')) {                                                               // 84\n    callback && callback(new Meteor.Error(400, \"Password is old. Please reset your \" + \"password.\"));         // 85\n  } else {                                                                                                    //\n    Accounts.callLoginMethod({                                                                                // 89\n      methodArguments: [{                                                                                     // 90\n        user: options.userSelector,                                                                           // 91\n        srp: SHA256(details.identity + \":\" + options.plaintextPassword),                                      // 92\n        password: Accounts._hashPassword(options.plaintextPassword)                                           // 93\n      }],                                                                                                     //\n      userCallback: callback                                                                                  // 95\n    });                                                                                                       //\n  }                                                                                                           //\n};                                                                                                            //\n                                                                                                              //\n// Attempt to log in as a new user.                                                                           //\n                                                                                                              //\n/**                                                                                                           //\n * @summary Create a new user.                                                                                //\n * @locus Anywhere                                                                                            //\n * @param {Object} options                                                                                    //\n * @param {String} options.username A unique name for this user.                                              //\n * @param {String} options.email The user's email address.                                                    //\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.    //\n * @param {Object} options.profile The user's profile, typically including the `name` field.                  //\n * @param {Function} [callback] Client only, optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */                                                                                                           //\nAccounts.createUser = function (options, callback) {                                                          // 113\n  options = _.clone(options); // we'll be modifying options                                                   // 114\n                                                                                                              //\n  if (typeof options.password !== 'string') throw new Error(\"options.password must be a string\");             // 113\n  if (!options.password) {                                                                                    // 118\n    callback(new Meteor.Error(400, \"Password may not be empty\"));                                             // 119\n    return;                                                                                                   // 120\n  }                                                                                                           //\n                                                                                                              //\n  // Replace password with the hashed password.                                                               //\n  options.password = Accounts._hashPassword(options.password);                                                // 113\n                                                                                                              //\n  Accounts.callLoginMethod({                                                                                  // 126\n    methodName: 'createUser',                                                                                 // 127\n    methodArguments: [options],                                                                               // 128\n    userCallback: callback                                                                                    // 129\n  });                                                                                                         //\n};                                                                                                            //\n                                                                                                              //\n// Change password. Must be logged in.                                                                        //\n//                                                                                                            //\n// @param oldPassword {String|null} By default servers no longer allow                                        //\n//   changing password without the old password, but they could so we                                         //\n//   support passing no password to the server and letting it decide.                                         //\n// @param newPassword {String}                                                                                //\n// @param callback {Function(error|undefined)}                                                                //\n                                                                                                              //\n/**                                                                                                           //\n * @summary Change the current user's password. Must be logged in.                                            //\n * @locus Client                                                                                              //\n * @param {String} oldPassword The user's current password. This is __not__ sent in plain text over the wire.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */                                                                                                           //\nAccounts.changePassword = function (oldPassword, newPassword, callback) {                                     // 148\n  if (!Meteor.user()) {                                                                                       // 149\n    callback && callback(new Error(\"Must be logged in to change password.\"));                                 // 150\n    return;                                                                                                   // 151\n  }                                                                                                           //\n                                                                                                              //\n  check(newPassword, String);                                                                                 // 154\n  if (!newPassword) {                                                                                         // 155\n    callback(new Meteor.Error(400, \"Password may not be empty\"));                                             // 156\n    return;                                                                                                   // 157\n  }                                                                                                           //\n                                                                                                              //\n  Accounts.connection.apply('changePassword', [oldPassword ? Accounts._hashPassword(oldPassword) : null, Accounts._hashPassword(newPassword)], function (error, result) {\n    if (error || !result) {                                                                                   // 165\n      if (error && error.error === 400 && error.reason === 'old password format') {                           // 166\n        // XXX COMPAT WITH 0.8.1.3                                                                            //\n        // The server is telling us to upgrade from SRP to bcrypt, as                                         //\n        // in Meteor.loginWithPassword.                                                                       //\n        srpUpgradePath({                                                                                      // 171\n          upgradeError: error,                                                                                // 172\n          userSelector: { id: Meteor.userId() },                                                              // 173\n          plaintextPassword: oldPassword                                                                      // 174\n        }, function (err) {                                                                                   //\n          if (err) {                                                                                          // 176\n            callback && callback(err);                                                                        // 177\n          } else {                                                                                            //\n            // Now that we've successfully migrated from srp to                                               //\n            // bcrypt, try changing the password again.                                                       //\n            Accounts.changePassword(oldPassword, newPassword, callback);                                      // 181\n          }                                                                                                   //\n        });                                                                                                   //\n      } else {                                                                                                //\n        // A normal error, not an error telling us to upgrade to bcrypt                                       //\n        callback && callback(error || new Error(\"No result from changePassword.\"));                           // 186\n      }                                                                                                       //\n    } else {                                                                                                  //\n      callback && callback();                                                                                 // 190\n    }                                                                                                         //\n  });                                                                                                         //\n};                                                                                                            //\n                                                                                                              //\n// Sends an email to a user with a link that can be used to reset                                             //\n// their password                                                                                             //\n//                                                                                                            //\n// @param options {Object}                                                                                    //\n//   - email: (email)                                                                                         //\n// @param callback (optional) {Function(error|undefined)}                                                     //\n                                                                                                              //\n/**                                                                                                           //\n * @summary Request a forgot password email.                                                                  //\n * @locus Client                                                                                              //\n * @param {Object} options                                                                                    //\n * @param {String} options.email The email address to send a password reset link.                             //\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */                                                                                                           //\nAccounts.forgotPassword = function (options, callback) {                                                      // 210\n  if (!options.email) throw new Error(\"Must pass options.email\");                                             // 211\n  Accounts.connection.call(\"forgotPassword\", options, callback);                                              // 213\n};                                                                                                            //\n                                                                                                              //\n// Resets a password based on a token originally created by                                                   //\n// Accounts.forgotPassword, and then logs in the matching user.                                               //\n//                                                                                                            //\n// @param token {String}                                                                                      //\n// @param newPassword {String}                                                                                //\n// @param callback (optional) {Function(error|undefined)}                                                     //\n                                                                                                              //\n/**                                                                                                           //\n * @summary Reset the password for a user using a token received in email. Logs the user in afterwards.       //\n * @locus Client                                                                                              //\n * @param {String} token The token retrieved from the reset password URL.                                     //\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */                                                                                                           //\nAccounts.resetPassword = function (token, newPassword, callback) {                                            // 230\n  check(token, String);                                                                                       // 231\n  check(newPassword, String);                                                                                 // 232\n                                                                                                              //\n  if (!newPassword) {                                                                                         // 234\n    callback(new Meteor.Error(400, \"Password may not be empty\"));                                             // 235\n    return;                                                                                                   // 236\n  }                                                                                                           //\n                                                                                                              //\n  Accounts.callLoginMethod({                                                                                  // 239\n    methodName: 'resetPassword',                                                                              // 240\n    methodArguments: [token, Accounts._hashPassword(newPassword)],                                            // 241\n    userCallback: callback });                                                                                // 242\n};                                                                                                            //\n                                                                                                              //\n// Verifies a user's email address based on a token originally                                                //\n// created by Accounts.sendVerificationEmail                                                                  //\n//                                                                                                            //\n// @param token {String}                                                                                      //\n// @param callback (optional) {Function(error|undefined)}                                                     //\n                                                                                                              //\n/**                                                                                                           //\n * @summary Marks the user's email address as verified. Logs the user in afterwards.                          //\n * @locus Client                                                                                              //\n * @param {String} token The token retrieved from the verification URL.                                       //\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */                                                                                                           //\nAccounts.verifyEmail = function (token, callback) {                                                           // 257\n  if (!token) throw new Error(\"Need to pass token\");                                                          // 258\n                                                                                                              //\n  Accounts.callLoginMethod({                                                                                  // 261\n    methodName: 'verifyEmail',                                                                                // 262\n    methodArguments: [token],                                                                                 // 263\n    userCallback: callback });                                                                                // 264\n};                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/accounts-password/password_client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['accounts-password'] = {};\n\n})();\n","servePath":"/packages/accounts-password.js","sourceMap":{"version":3,"sources":["/packages/accounts-password/password_client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,iBAAP,GAA2B,UAAU,QAAV,EAAoB,QAApB,EAA8B,QAA9B,EAAwC;AACjE,MAAI,OAAO,QAAP,KAAoB,QAApB,EACF,IAAI,SAAS,OAAT,CAAiB,GAAjB,MAA0B,CAAC,CAAD,EAC5B,WAAW,EAAC,UAAU,QAAV,EAAZ,CADF,KAGE,WAAW,EAAC,OAAO,QAAP,EAAZ,CAHF;;AAKF,WAAS,eAAT,CAAyB;AACvB,qBAAiB,CAAC;AAChB,YAAM,QAAN;AACA,gBAAU,SAAS,aAAT,CAAuB,QAAvB,CAAV;KAFe,CAAjB;AAIA;AAAc,4BAAU,KAAV,EAAiB,MAAjB,EAAyB;AACrC,YAAI,SAAS,MAAM,KAAN,KAAgB,GAAhB,IACT,MAAM,MAAN,KAAiB,qBAAjB,EAAwC;;;;;;;;;;;;;AAa1C,yBAAe;AACb,0BAAc,KAAd;AACA,0BAAc,QAAd;AACA,+BAAmB,QAAnB;WAHF,EAIG,QAJH,EAb0C;SAD5C,MAoBK,IAAI,KAAJ,EAAW;AACd,sBAAY,SAAS,KAAT,CAAZ,CADc;SAAX,MAEE;AACL,sBAAY,UAAZ,CADK;SAFF;OArBO;;;OAAd;GALF,EAPiE;CAAxC;;AA0C3B,SAAS,aAAT,GAAyB,UAAU,QAAV,EAAoB;AAC3C,SAAO;AACL,YAAQ,OAAO,QAAP,CAAR;AACA,eAAW,SAAX;GAFF,CAD2C;CAApB;;;;;;;;;AAczB,IAAI,iBAAiB,SAAjB,cAAiB,CAAU,OAAV,EAAmB,QAAnB,EAA6B;AAChD,MAAI,OAAJ,CADgD;AAEhD,MAAI;AACF,cAAU,MAAM,KAAN,CAAY,QAAQ,YAAR,CAAqB,OAArB,CAAtB,CADE;GAAJ,CAEE,OAAO,CAAP,EAAU,EAAV;AACF,MAAI,EAAE,WAAW,QAAQ,MAAR,KAAmB,KAAnB,CAAb,EAAwC;AAC1C,gBAAY,SACV,IAAI,OAAO,KAAP,CAAa,GAAjB,EAAsB,wCACL,WADK,CADZ,CAAZ,CAD0C;GAA5C,MAIO;AACL,aAAS,eAAT,CAAyB;AACvB,uBAAiB,CAAC;AAChB,cAAM,QAAQ,YAAR;AACN,aAAK,OAAO,QAAQ,QAAR,GAAmB,GAAnB,GAAyB,QAAQ,iBAAR,CAArC;AACA,kBAAU,SAAS,aAAT,CAAuB,QAAQ,iBAAR,CAAjC;OAHe,CAAjB;AAKA,oBAAc,QAAd;KANF,EADK;GAJP;CALmB;;;;;;;;;;;;;;AAkCrB,SAAS,UAAT,GAAsB,UAAU,OAAV,EAAmB,QAAnB,EAA6B;AACjD,YAAU,EAAE,KAAF,CAAQ,OAAR,CAAV;;AADiD,MAG7C,OAAO,QAAQ,QAAR,KAAqB,QAA5B,EACF,MAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN,CADF;AAEA,MAAI,CAAC,QAAQ,QAAR,EAAkB;AACrB,aAAS,IAAI,OAAO,KAAP,CAAa,GAAjB,EAAsB,2BAAtB,CAAT,EADqB;AAErB,WAFqB;GAAvB;;;AALiD,SAWjD,CAAQ,QAAR,GAAmB,SAAS,aAAT,CAAuB,QAAQ,QAAR,CAA1C,CAXiD;;AAajD,WAAS,eAAT,CAAyB;AACvB,gBAAY,YAAZ;AACA,qBAAiB,CAAC,OAAD,CAAjB;AACA,kBAAc,QAAd;GAHF,EAbiD;CAA7B;;;;;;;;;;;;;;;;;AAmCtB,SAAS,cAAT,GAA0B,UAAU,WAAV,EAAuB,WAAvB,EAAoC,QAApC,EAA8C;AACtE,MAAI,CAAC,OAAO,IAAP,EAAD,EAAgB;AAClB,gBAAY,SAAS,IAAI,KAAJ,CAAU,uCAAV,CAAT,CAAZ,CADkB;AAElB,WAFkB;GAApB;;AAKA,QAAM,WAAN,EAAmB,MAAnB,EANsE;AAOtE,MAAI,CAAC,WAAD,EAAc;AAChB,aAAS,IAAI,OAAO,KAAP,CAAa,GAAjB,EAAsB,2BAAtB,CAAT,EADgB;AAEhB,WAFgB;GAAlB;;AAKA,WAAS,UAAT,CAAoB,KAApB,CACE,gBADF,EAEE,CAAC,cAAc,SAAS,aAAT,CAAuB,WAAvB,CAAd,GAAoD,IAApD,EACA,SAAS,aAAT,CAAuB,WAAvB,CADD,CAFF,EAIE,UAAU,KAAV,EAAiB,MAAjB,EAAyB;AACvB,QAAI,SAAS,CAAC,MAAD,EAAS;AACpB,UAAI,SAAS,MAAM,KAAN,KAAgB,GAAhB,IACT,MAAM,MAAN,KAAiB,qBAAjB,EAAwC;;;;AAI1C,uBAAe;AACb,wBAAc,KAAd;AACA,wBAAc,EAAE,IAAI,OAAO,MAAP,EAAJ,EAAhB;AACA,6BAAmB,WAAnB;SAHF,EAIG,UAAU,GAAV,EAAe;AAChB,cAAI,GAAJ,EAAS;AACP,wBAAY,SAAS,GAAT,CAAZ,CADO;WAAT,MAEO;;;AAGL,qBAAS,cAAT,CAAwB,WAAxB,EAAqC,WAArC,EAAkD,QAAlD,EAHK;WAFP;SADC,CAJH,CAJ0C;OAD5C,MAkBO;;AAEL,oBAAY,SACV,SAAS,IAAI,KAAJ,CAAU,gCAAV,CAAT,CADF,CAFK;OAlBP;KADF,MAwBO;AACL,kBAAY,UAAZ,CADK;KAxBP;GADF,CAJF,CAZsE;CAA9C;;;;;;;;;;;;;;;;AA8D1B,SAAS,cAAT,GAA0B,UAAS,OAAT,EAAkB,QAAlB,EAA4B;AACpD,MAAI,CAAC,QAAQ,KAAR,EACH,MAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN,CADF;AAEA,WAAS,UAAT,CAAoB,IAApB,CAAyB,gBAAzB,EAA2C,OAA3C,EAAoD,QAApD,EAHoD;CAA5B;;;;;;;;;;;;;;;;AAoB1B,SAAS,aAAT,GAAyB,UAAS,KAAT,EAAgB,WAAhB,EAA6B,QAA7B,EAAuC;AAC9D,QAAM,KAAN,EAAa,MAAb,EAD8D;AAE9D,QAAM,WAAN,EAAmB,MAAnB,EAF8D;;AAI9D,MAAI,CAAC,WAAD,EAAc;AAChB,aAAS,IAAI,OAAO,KAAP,CAAa,GAAjB,EAAsB,2BAAtB,CAAT,EADgB;AAEhB,WAFgB;GAAlB;;AAKA,WAAS,eAAT,CAAyB;AACvB,gBAAY,eAAZ;AACA,qBAAiB,CAAC,KAAD,EAAQ,SAAS,aAAT,CAAuB,WAAvB,CAAR,CAAjB;AACA,kBAAc,QAAd,EAHF,EAT8D;CAAvC;;;;;;;;;;;;;;AA2BzB,SAAS,WAAT,GAAuB,UAAS,KAAT,EAAgB,QAAhB,EAA0B;AAC/C,MAAI,CAAC,KAAD,EACF,MAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN,CADF;;AAGA,WAAS,eAAT,CAAyB;AACvB,gBAAY,aAAZ;AACA,qBAAiB,CAAC,KAAD,CAAjB;AACA,kBAAc,QAAd,EAHF,EAJ+C;CAA1B,+G","file":"/packages/accounts-password.js","sourcesContent":["// Attempt to log in with a password.\n//\n// @param selector {String|Object} One of the following:\n//   - {username: (username)}\n//   - {email: (email)}\n//   - a string which may be a username or email, depending on whether\n//     it contains \"@\".\n// @param password {String}\n// @param callback {Function(error|undefined)}\n\n/**\n * @summary Log the user in with a password.\n * @locus Client\n * @param {Object | String} user\n *   Either a string interpreted as a username or an email; or an object with a\n *   single key: `email`, `username` or `id`. Username or email match in a case\n *   insensitive manner.\n * @param {String} password The user's password.\n * @param {Function} [callback] Optional callback.\n *   Called with no arguments on success, or with a single `Error` argument\n *   on failure.\n */\nMeteor.loginWithPassword = function (selector, password, callback) {\n  if (typeof selector === 'string')\n    if (selector.indexOf('@') === -1)\n      selector = {username: selector};\n    else\n      selector = {email: selector};\n\n  Accounts.callLoginMethod({\n    methodArguments: [{\n      user: selector,\n      password: Accounts._hashPassword(password)\n    }],\n    userCallback: function (error, result) {\n      if (error && error.error === 400 &&\n          error.reason === 'old password format') {\n        // The \"reason\" string should match the error thrown in the\n        // password login handler in password_server.js.\n\n        // XXX COMPAT WITH 0.8.1.3\n        // If this user's last login was with a previous version of\n        // Meteor that used SRP, then the server throws this error to\n        // indicate that we should try again. The error includes the\n        // user's SRP identity. We provide a value derived from the\n        // identity and the password to prove to the server that we know\n        // the password without requiring a full SRP flow, as well as\n        // SHA256(password), which the server bcrypts and stores in\n        // place of the old SRP information for this user.\n        srpUpgradePath({\n          upgradeError: error,\n          userSelector: selector,\n          plaintextPassword: password\n        }, callback);\n      }\n      else if (error) {\n        callback && callback(error);\n      } else {\n        callback && callback();\n      }\n    }\n  });\n};\n\nAccounts._hashPassword = function (password) {\n  return {\n    digest: SHA256(password),\n    algorithm: \"sha-256\"\n  };\n};\n\n// XXX COMPAT WITH 0.8.1.3\n// The server requested an upgrade from the old SRP password format,\n// so supply the needed SRP identity to login. Options:\n//   - upgradeError: the error object that the server returned to tell\n//     us to upgrade from SRP to bcrypt.\n//   - userSelector: selector to retrieve the user object\n//   - plaintextPassword: the password as a string\nvar srpUpgradePath = function (options, callback) {\n  var details;\n  try {\n    details = EJSON.parse(options.upgradeError.details);\n  } catch (e) {}\n  if (!(details && details.format === 'srp')) {\n    callback && callback(\n      new Meteor.Error(400, \"Password is old. Please reset your \" +\n                       \"password.\"));\n  } else {\n    Accounts.callLoginMethod({\n      methodArguments: [{\n        user: options.userSelector,\n        srp: SHA256(details.identity + \":\" + options.plaintextPassword),\n        password: Accounts._hashPassword(options.plaintextPassword)\n      }],\n      userCallback: callback\n    });\n  }\n};\n\n\n// Attempt to log in as a new user.\n\n/**\n * @summary Create a new user.\n * @locus Anywhere\n * @param {Object} options\n * @param {String} options.username A unique name for this user.\n * @param {String} options.email The user's email address.\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.\n * @param {Object} options.profile The user's profile, typically including the `name` field.\n * @param {Function} [callback] Client only, optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */\nAccounts.createUser = function (options, callback) {\n  options = _.clone(options); // we'll be modifying options\n\n  if (typeof options.password !== 'string')\n    throw new Error(\"options.password must be a string\");\n  if (!options.password) {\n    callback(new Meteor.Error(400, \"Password may not be empty\"));\n    return;\n  }\n\n  // Replace password with the hashed password.\n  options.password = Accounts._hashPassword(options.password);\n\n  Accounts.callLoginMethod({\n    methodName: 'createUser',\n    methodArguments: [options],\n    userCallback: callback\n  });\n};\n\n// Change password. Must be logged in.\n//\n// @param oldPassword {String|null} By default servers no longer allow\n//   changing password without the old password, but they could so we\n//   support passing no password to the server and letting it decide.\n// @param newPassword {String}\n// @param callback {Function(error|undefined)}\n\n/**\n * @summary Change the current user's password. Must be logged in.\n * @locus Client\n * @param {String} oldPassword The user's current password. This is __not__ sent in plain text over the wire.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */\nAccounts.changePassword = function (oldPassword, newPassword, callback) {\n  if (!Meteor.user()) {\n    callback && callback(new Error(\"Must be logged in to change password.\"));\n    return;\n  }\n\n  check(newPassword, String);\n  if (!newPassword) {\n    callback(new Meteor.Error(400, \"Password may not be empty\"));\n    return;\n  }\n\n  Accounts.connection.apply(\n    'changePassword',\n    [oldPassword ? Accounts._hashPassword(oldPassword) : null,\n     Accounts._hashPassword(newPassword)],\n    function (error, result) {\n      if (error || !result) {\n        if (error && error.error === 400 &&\n            error.reason === 'old password format') {\n          // XXX COMPAT WITH 0.8.1.3\n          // The server is telling us to upgrade from SRP to bcrypt, as\n          // in Meteor.loginWithPassword.\n          srpUpgradePath({\n            upgradeError: error,\n            userSelector: { id: Meteor.userId() },\n            plaintextPassword: oldPassword\n          }, function (err) {\n            if (err) {\n              callback && callback(err);\n            } else {\n              // Now that we've successfully migrated from srp to\n              // bcrypt, try changing the password again.\n              Accounts.changePassword(oldPassword, newPassword, callback);\n            }\n          });\n        } else {\n          // A normal error, not an error telling us to upgrade to bcrypt\n          callback && callback(\n            error || new Error(\"No result from changePassword.\"));\n        }\n      } else {\n        callback && callback();\n      }\n    }\n  );\n};\n\n// Sends an email to a user with a link that can be used to reset\n// their password\n//\n// @param options {Object}\n//   - email: (email)\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Request a forgot password email.\n * @locus Client\n * @param {Object} options\n * @param {String} options.email The email address to send a password reset link.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */\nAccounts.forgotPassword = function(options, callback) {\n  if (!options.email)\n    throw new Error(\"Must pass options.email\");\n  Accounts.connection.call(\"forgotPassword\", options, callback);\n};\n\n// Resets a password based on a token originally created by\n// Accounts.forgotPassword, and then logs in the matching user.\n//\n// @param token {String}\n// @param newPassword {String}\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Reset the password for a user using a token received in email. Logs the user in afterwards.\n * @locus Client\n * @param {String} token The token retrieved from the reset password URL.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */\nAccounts.resetPassword = function(token, newPassword, callback) {\n  check(token, String);\n  check(newPassword, String);\n\n  if (!newPassword) {\n    callback(new Meteor.Error(400, \"Password may not be empty\"));\n    return;\n  }\n\n  Accounts.callLoginMethod({\n    methodName: 'resetPassword',\n    methodArguments: [token, Accounts._hashPassword(newPassword)],\n    userCallback: callback});\n};\n\n// Verifies a user's email address based on a token originally\n// created by Accounts.sendVerificationEmail\n//\n// @param token {String}\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Marks the user's email address as verified. Logs the user in afterwards.\n * @locus Client\n * @param {String} token The token retrieved from the verification URL.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */\nAccounts.verifyEmail = function(token, callback) {\n  if (!token)\n    throw new Error(\"Need to pass token\");\n\n  Accounts.callLoginMethod({\n    methodName: 'verifyEmail',\n    methodArguments: [token],\n    userCallback: callback});\n};\n"]}}]